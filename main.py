import streamlit as st
import plotly.graph_objects as go
from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination

def criar_modelo():
    # 1. Definir a estrutura da rede bayesiana
    modelo = BayesianNetwork([
        ('Doen√ßa', 'Febre'),
        ('Doen√ßa', 'Tosse'),
        ('Doen√ßa', 'Espirros'),
        ('Esta√ß√£o', 'Espirros')
    ])

    # 2. Definir as Tabelas de Probabilidade Condicional (CPDs)
    cpd_doenca = TabularCPD(
        variable='Doen√ßa',
        variable_card=3,  # 0: Nenhuma, 1: Gripe, 2: Alergia
        values=[[0.7], [0.2], [0.1]]  # Probabilidades a priori
    )

    cpd_estacao = TabularCPD(
        variable='Esta√ß√£o',
        variable_card=4,  # 0: Inverno, 1: Primavera, 2: Ver√£o, 3: Outono
        values=[[0.25], [0.25], [0.25], [0.25]]  # Todas as esta√ß√µes igualmente prov√°veis
    )

    cpd_febre = TabularCPD(
        variable='Febre',
        variable_card=2,  # 0: N√£o, 1: Sim
        values=[
            [0.95, 0.3, 0.8],   # P(Febre=0 | Doen√ßa)
            [0.05, 0.7, 0.2]    # P(Febre=1 | Doen√ßa)
        ],
        evidence=['Doen√ßa'],
        evidence_card=[3]
    )

    cpd_tosse = TabularCPD(
        variable='Tosse',
        variable_card=2,
        values=[
            [0.8, 0.2, 0.9],    # P(Tosse=0 | Doen√ßa)
            [0.2, 0.8, 0.1]     # P(Tosse=1 | Doen√ßa)
        ],
        evidence=['Doen√ßa'],
        evidence_card=[3]
    )

    cpd_espirros = TabularCPD(
        variable='Espirros',
        variable_card=2,
        values=[
            # P(Espirros=0 | Doen√ßa, Esta√ß√£o)
            [0.9, 0.6, 0.7, 0.8,  # Doen√ßa=0 (Nenhuma) para cada esta√ß√£o
             0.3, 0.1, 0.2, 0.2,  # Doen√ßa=1 (Gripe) para cada esta√ß√£o
             0.2, 0.05, 0.1, 0.1],  # Doen√ßa=2 (Alergia) para cada esta√ß√£o
            # P(Espirros=1 | Doen√ßa, Esta√ß√£o)
            [0.1, 0.4, 0.3, 0.2,  # Doen√ßa=0 (Nenhuma) para cada esta√ß√£o
             0.7, 0.9, 0.8, 0.8,  # Doen√ßa=1 (Gripe) para cada esta√ß√£o
             0.8, 0.95, 0.9, 0.9]  # Doen√ßa=2 (Alergia) para cada esta√ß√£o
            ],
        evidence=['Doen√ßa', 'Esta√ß√£o'],
        evidence_card=[3, 4]
    )

    try:
        # Adicionar CPDs ao modelo
        modelo.add_cpds(cpd_doenca, cpd_estacao, cpd_febre, cpd_tosse, cpd_espirros)
        
        # Verificar se o modelo √© v√°lido
        if not modelo.check_model():
            st.error("Erro: Modelo inconsistente!")
            return None, None
            
        # Criar infer√™ncia
        inferencia = VariableElimination(modelo)
        return modelo, inferencia
        
    except Exception as e:
        st.error(f"Erro ao criar modelo: {str(e)}")
        return None, None

def criar_interface():
    st.title("üè• Sistema de Diagn√≥stico M√©dico - Rede Bayesiana")
    
    # Entradas do usu√°rio
    with st.sidebar:
        st.header("ü©∫ Sintomas Observados")
        febre = st.selectbox("Febre:", ["N√£o", "Sim"])
        tosse = st.selectbox("Tosse:", ["N√£o", "Sim"])
        espirros = st.selectbox("Espirros:", ["N√£o", "Sim"])
        estacao = st.selectbox("Esta√ß√£o do Ano:", ["Inverno", "Primavera", "Ver√£o", "Outono"])
    
    return febre, tosse, espirros, estacao

def exibir_resultados(resultado):
    st.subheader("üìä Probabilidades de Diagn√≥stico")
    doencas = ["Sem Doen√ßa", "Gripe", "Alergia"]
    
    # M√©tricas
    for i, prob in enumerate(resultado.values):
        st.metric(
            label=f"{doencas[i]}",
            value=f"{prob*100:.2f}%",
            delta="üî¥ Risco Alto" if prob > 0.5 and i > 0 else "üü¢ Risco Baixo"
        )
    
    # Gr√°fico de barras
    fig = go.Figure(data=[
        go.Bar(
            x=doencas,
            y=resultado.values * 100,
            marker_color=['green', 'red', 'orange']
        )
    ])
    
    fig.update_layout(
        title="Distribui√ß√£o de Probabilidades",
        yaxis_title="Probabilidade (%)",
        xaxis_title="Diagn√≥stico",
        showlegend=False
    )
    
    st.plotly_chart(fig)

def main():
    # Criar modelo
    modelo, inferencia = criar_modelo()
    if modelo is None or inferencia is None:
        return
    
    # Criar interface
    febre, tosse, espirros, estacao = criar_interface()
    
    # Mapear entradas para valores num√©ricos
    mapeamento = {
        "N√£o": 0,
        "Sim": 1,
        "Inverno": 0, "Primavera": 1, "Ver√£o": 2, "Outono": 3
    }
    
    try:
        # Calcular probabilidades
        resultado = inferencia.query(
            variables=['Doen√ßa'],
            evidence={
                'Febre': mapeamento[febre],
                'Tosse': mapeamento[tosse],
                'Espirros': mapeamento[espirros],
                'Esta√ß√£o': mapeamento[estacao]
            }
        )
        
        # Exibir resultados
        exibir_resultados(resultado)
        
        # Explica√ß√£o
        with st.expander("üß† Como a rede bayesiana funciona?"):
            st.markdown("""
            **Estrutura da Rede:**
            ```mermaid
            graph TD
                D[Doen√ßa] --> F[Febre]
                D --> T[Tosse]
                D --> E[Espirros]
                S[Esta√ß√£o] --> E
            ```
            
            **Vari√°veis:**
            - **Doen√ßa**: Causa raiz (Gripe, Alergia, Nenhuma)
            - **Esta√ß√£o**: Fator ambiental que influencia espirros
            - **Sintomas**: Febre, Tosse, Espirros (observ√°veis)
            
            **Infer√™ncia:**
            - Dados os sintomas observados, calculamos a probabilidade de cada doen√ßa usando o teorema de Bayes.
            - A rede considera rela√ß√µes complexas (ex: alergia √© mais prov√°vel na primavera).
            """)
            
    except Exception as e:
        st.error(f"Erro ao realizar infer√™ncia: {str(e)}")
    
    st.caption("‚ö†Ô∏è Este √© um modelo ilustrativo simplificado. N√£o use para diagn√≥sticos reais!")

if __name__ == "__main__":
    main()